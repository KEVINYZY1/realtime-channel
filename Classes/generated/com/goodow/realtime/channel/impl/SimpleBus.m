//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/workspace/realtime/realtime-channel/src/main/java/com/goodow/realtime/channel/impl/SimpleBus.java
//
//  Created by retechretech.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/channel/Bus.h"
#include "com/goodow/realtime/channel/Message.h"
#include "com/goodow/realtime/channel/State.h"
#include "com/goodow/realtime/channel/impl/DefaultMessage.h"
#include "com/goodow/realtime/channel/impl/SimpleBus.h"
#include "com/goodow/realtime/channel/util/IdGenerator.h"
#include "com/goodow/realtime/core/Handler.h"
#include "com/goodow/realtime/json/Json.h"
#include "com/goodow/realtime/json/JsonArray.h"
#include "com/goodow/realtime/json/JsonElement.h"
#include "com/goodow/realtime/json/JsonObject.h"
#include "java/lang/IllegalArgumentException.h"

@implementation ComGoodowRealtimeChannelImplSimpleBus

- (id)init {
  if (self = [super init]) {
    state_ = [GDCStateEnum CONNECTING];
    handlerMap_ = [GDJson createObject];
    replyHandlers_ = [GDJson createObject];
    idGenerator_ = [[ComGoodowRealtimeChannelUtilIdGenerator alloc] init];
    state_ = [GDCStateEnum OPEN];
  }
  return self;
}

- (void)close {
  state_ = [GDCStateEnum CLOSING];
  (void) [self publish:[NSString stringWithFormat:@"@%@", [GDCBus LOCAL_ON_CLOSE]] message:nil];
  state_ = [GDCStateEnum CLOSED];
  [self clearHandlers];
}

- (GDCStateEnum *)getReadyState {
  return state_;
}

- (id<GDCBus>)publish:(NSString *)address message:(id<GDJsonElement>)msg {
  [self sendOrPubWithBoolean:NO withNSString:address withGDJsonElement:msg withId:nil];
  return self;
}

- (id<GDCBus>)registerHandler:(NSString *)address handler:(id)handler {
  [self checkNotNullWithNSString:@"address" withId:address];
  [self checkNotNullWithNSString:@"handler" withId:handler];
  id<GDJsonArray> handlers = [((id<GDJsonObject>) nil_chk(handlerMap_)) getArray:address];
  if (handlers == nil) {
    handlers = [GDJson createArray];
    (void) [((id<GDJsonArray>) nil_chk(handlers)) push:handler];
    (void) [handlerMap_ set:address value:handlers];
  }
  else if ([handlers indexOfObject:handler] == -1) {
    (void) [handlers push:handler];
  }
  return self;
}

- (id<GDCBus>)send:(NSString *)address message:(id<GDJsonElement>)msg replyHandler:(id)replyHandler {
  [self sendOrPubWithBoolean:YES withNSString:address withGDJsonElement:msg withId:replyHandler];
  return self;
}

- (id<GDCBus>)unregisterHandler:(NSString *)address handler:(id)handler {
  [self checkNotNullWithNSString:@"address" withId:address];
  [self checkNotNullWithNSString:@"handler" withId:handler];
  id<GDJsonArray> handlers = [((id<GDJsonObject>) nil_chk(handlerMap_)) getWithNSString:address];
  if (handlers != nil) {
    int idx = [handlers indexOfObject:handler];
    if (idx != -1) {
      (void) [handlers remove:idx];
    }
    if ([handlers count] == 0) {
      (void) [handlerMap_ remove:address];
    }
  }
  return self;
}

- (void)checkNotNullWithNSString:(NSString *)paramName
                          withId:(id)param {
  if (param == nil) {
    @throw [[JavaLangIllegalArgumentException alloc] initWithNSString:[NSString stringWithFormat:@"Parameter %@ must be specified", paramName]];
  }
}

- (void)clearHandlers {
  IOSObjectArray *keys = [((id<GDJsonObject>) nil_chk(replyHandlers_)) keys];
  {
    IOSObjectArray *a__ = keys;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *key = (*b__++);
      (void) [replyHandlers_ remove:key];
    }
  }
  keys = [((id<GDJsonObject>) nil_chk(handlerMap_)) keys];
  {
    IOSObjectArray *a__ = keys;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *key = (*b__++);
      id<GDJsonArray> handlers = [handlerMap_ getArray:key];
      for (int i = [((id<GDJsonArray>) nil_chk(handlers)) count] - 1; i >= 0; i--) {
        (void) [handlers remove:i];
      }
      (void) [handlerMap_ remove:key];
    }
  }
}

- (void)deliverMessageWithNSString:(NSString *)address
                    withGDCMessage:(id<GDCMessage>)message {
  id<GDJsonArray> handlers = [((id<GDJsonObject>) nil_chk(handlerMap_)) getWithNSString:address];
  if (handlers != nil) {
    for (int i = 0, len = [handlers count]; i < len; i++) {
      [self nativeHandleWithId:message withId:[handlers getWithInt:i]];
    }
  }
  else {
    id handler = [((id<GDJsonObject>) nil_chk(replyHandlers_)) getWithNSString:address];
    if (handler != nil) {
      (void) [replyHandlers_ remove:address];
      [self nativeHandleWithId:message withId:handler];
    }
  }
}

- (NSString *)makeUUID {
  return [((ComGoodowRealtimeChannelUtilIdGenerator *) nil_chk(idGenerator_)) nextWithInt:36];
}

- (void)nativeHandleWithId:(id)message
                    withId:(id)handler {
  [((id<ComGoodowRealtimeCoreHandler>) check_protocol_cast(handler, @protocol(ComGoodowRealtimeCoreHandler))) handleWithId:message];
}

- (void)sendOrPubWithBoolean:(BOOL)send
                withNSString:(NSString *)address
           withGDJsonElement:(id<GDJsonElement>)msg
                      withId:(id)replyHandler {
  [self checkNotNullWithNSString:@"address" withId:address];
  NSString *replyAddress = nil;
  if (replyHandler != nil) {
    replyAddress = [self makeUUID];
    (void) [((id<GDJsonObject>) nil_chk(replyHandlers_)) set:replyAddress value:replyHandler];
  }
  [self deliverMessageWithNSString:address withGDCMessage:[[ComGoodowRealtimeChannelImplDefaultMessage alloc] initWithBoolean:NO withGDCBus:self withNSString:address withNSString:replyAddress withId:msg]];
  return;
}

- (void)copyAllFieldsTo:(ComGoodowRealtimeChannelImplSimpleBus *)other {
  [super copyAllFieldsTo:other];
  other->handlerMap_ = handlerMap_;
  other->idGenerator_ = idGenerator_;
  other->replyHandlers_ = replyHandlers_;
  other->state_ = state_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "getReadyState", NULL, "LGDCStateEnum", 0x1, NULL },
    { "checkNotNullWithNSString:withId:", NULL, "V", 0x4, NULL },
    { "clearHandlers", NULL, "V", 0x4, NULL },
    { "deliverMessageWithNSString:withGDCMessage:", NULL, "V", 0x4, NULL },
    { "makeUUID", NULL, "LNSString", 0x4, NULL },
    { "nativeHandleWithId:withId:", NULL, "V", 0x4, NULL },
    { "sendOrPubWithBoolean:withNSString:withGDJsonElement:withId:", NULL, "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "handlerMap_", NULL, 0x14, "LGDJsonObject" },
    { "replyHandlers_", NULL, 0x14, "LGDJsonObject" },
    { "state_", NULL, 0x4, "LGDCStateEnum" },
    { "idGenerator_", NULL, 0x12, "LComGoodowRealtimeChannelUtilIdGenerator" },
  };
  static J2ObjcClassInfo _ComGoodowRealtimeChannelImplSimpleBus = { "SimpleBus", "com.goodow.realtime.channel.impl", NULL, 0x1, 7, methods, 4, fields, 0, NULL};
  return &_ComGoodowRealtimeChannelImplSimpleBus;
}

@end
