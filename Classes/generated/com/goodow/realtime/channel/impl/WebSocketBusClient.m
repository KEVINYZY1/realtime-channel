//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/workspace/realtime/realtime-channel/src/main/java/com/goodow/realtime/channel/impl/WebSocketBusClient.java
//
//  Created by retechretech.
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "com/goodow/realtime/channel/Bus.h"
#include "com/goodow/realtime/channel/Message.h"
#include "com/goodow/realtime/channel/State.h"
#include "com/goodow/realtime/channel/impl/DefaultMessage.h"
#include "com/goodow/realtime/channel/impl/SimpleBus.h"
#include "com/goodow/realtime/channel/impl/WebSocketBusClient.h"
#include "com/goodow/realtime/core/Handler.h"
#include "com/goodow/realtime/core/HandlerRegistration.h"
#include "com/goodow/realtime/core/Net.h"
#include "com/goodow/realtime/core/Platform.h"
#include "com/goodow/realtime/core/WebSocket.h"
#include "com/goodow/realtime/json/Json.h"
#include "com/goodow/realtime/json/JsonArray.h"
#include "com/goodow/realtime/json/JsonObject.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Void.h"
#include "java/util/logging/Logger.h"

@implementation GDCWebSocketBusClient

static NSString * GDCWebSocketBusClient_PING_INTERVAL_ = @"vertxbus_ping_interval";
static NSString * GDCWebSocketBusClient_BODY_ = @"body";
static NSString * GDCWebSocketBusClient_ADDRESS_ = @"address";
static NSString * GDCWebSocketBusClient_REPLY_ADDRESS_ = @"replyAddress";
static NSString * GDCWebSocketBusClient_TYPE_ = @"type";
static JavaUtilLoggingLogger * GDCWebSocketBusClient_log_;

+ (NSString *)PING_INTERVAL {
  return GDCWebSocketBusClient_PING_INTERVAL_;
}

+ (NSString *)BODY {
  return GDCWebSocketBusClient_BODY_;
}

+ (NSString *)ADDRESS {
  return GDCWebSocketBusClient_ADDRESS_;
}

+ (NSString *)REPLY_ADDRESS {
  return GDCWebSocketBusClient_REPLY_ADDRESS_;
}

+ (NSString *)TYPE {
  return GDCWebSocketBusClient_TYPE_;
}

+ (JavaUtilLoggingLogger *)log {
  return GDCWebSocketBusClient_log_;
}

- (id)initWithNSString:(NSString *)url
      withGDJsonObject:(id<GDJsonObject>)options {
  if (self = [super initWithGDJsonObject:options]) {
    pingTimerID_ = 0;
    reconnect__ = YES;
    state_ = [GDCStateEnum CONNECTING];
    self->url_ = url;
    self->options_ = options;
    pingInterval_ = options != nil && [options has:GDCWebSocketBusClient_PING_INTERVAL_] ? (int) [options getNumber:GDCWebSocketBusClient_PING_INTERVAL_] : 5 * 1000;
    webSocketHandler_ = [[GDCWebSocketBusClient_$1 alloc] initWithGDCWebSocketBusClient:self];
    [self reconnect];
  }
  return self;
}

- (void)close {
  state_ = [GDCStateEnum CLOSING];
  reconnect__ = NO;
  [((id<ComGoodowRealtimeCoreWebSocket>) nil_chk(webSocket_)) close];
  (void) [self registerHandlerWithNSString:[GDCBus LOCAL_ON_CLOSE] withComGoodowRealtimeCoreHandler:[[GDCWebSocketBusClient_$2 alloc] initWithGDCWebSocketBusClient:self]];
}

- (void)login:(NSString *)username password:(NSString *)password replyHandler:(id)replyHandler {
  id<GDJsonObject> msg = [((id<GDJsonObject>) nil_chk([((id<GDJsonObject>) nil_chk([GDJson createObject])) set:@"username" value:username])) set:@"password" value:password];
  NSString *addr = @"vertx.basicauthmanager.login";
  [self doSendOrPubWithBoolean:YES withNSString:addr withId:msg withComGoodowRealtimeCoreHandler:[[GDCWebSocketBusClient_$3 alloc] initWithGDCWebSocketBusClient:self withComGoodowRealtimeCoreHandler:replyHandler]];
}

- (void)reconnect {
  if (state_ == [GDCStateEnum OPEN]) {
    return;
  }
  if (webSocket_ != nil) {
    [webSocket_ close];
  }
  state_ = [GDCStateEnum CONNECTING];
  webSocket_ = [((id<ComGoodowRealtimeCoreNet>) nil_chk([ComGoodowRealtimeCorePlatform net])) createWebSocketWithNSString:url_ withGDJsonObject:options_];
  [((id<ComGoodowRealtimeCoreWebSocket>) nil_chk(webSocket_)) setListenWithComGoodowRealtimeCoreWebSocket_WebSocketHandler:webSocketHandler_];
}

- (id<ComGoodowRealtimeCoreHandlerRegistration>)registerHandlerWithNSString:(NSString *)address
                                           withComGoodowRealtimeCoreHandler:(id<ComGoodowRealtimeCoreHandler>)handler {
  return [super registerHandler:address handler:handler];
}

- (BOOL)doRegisterHandlerWithNSString:(NSString *)address
     withComGoodowRealtimeCoreHandler:(id<ComGoodowRealtimeCoreHandler>)handler {
  BOOL first = [super doRegisterHandlerWithNSString:address withComGoodowRealtimeCoreHandler:handler];
  if (first && ![self isLocalForkWithNSString:address]) {
    [self sendRegisterWithNSString:address];
  }
  return first;
}

- (void)doSendOrPubWithBoolean:(BOOL)send
                  withNSString:(NSString *)address
                        withId:(id)msg
withComGoodowRealtimeCoreHandler:(id<ComGoodowRealtimeCoreHandler>)replyHandler {
  [GDCSimpleBus checkNotNullWithNSString:GDCWebSocketBusClient_ADDRESS_ withId:address];
  if ([self isLocalForkWithNSString:address]) {
    [super doSendOrPubWithBoolean:send withNSString:address withId:msg withComGoodowRealtimeCoreHandler:replyHandler];
    return;
  }
  if (state_ != [GDCStateEnum OPEN]) {
    @throw [[JavaLangIllegalStateException alloc] initWithNSString:@"INVALID_STATE_ERR"];
  }
  id<GDJsonObject> envelope = [((id<GDJsonObject>) nil_chk([GDJson createObject])) set:GDCWebSocketBusClient_TYPE_ value:send ? @"send" : @"publish"];
  (void) [((id<GDJsonObject>) nil_chk([((id<GDJsonObject>) nil_chk(envelope)) set:GDCWebSocketBusClient_ADDRESS_ value:address])) set:GDCWebSocketBusClient_BODY_ value:msg];
  if (sessionID_ != nil) {
    (void) [envelope set:@"sessionID" value:sessionID_];
  }
  if (replyHandler != nil) {
    NSString *replyAddress = [self makeUUID];
    (void) [envelope set:GDCWebSocketBusClient_REPLY_ADDRESS_ value:replyAddress];
    (void) [((id<GDJsonObject>) nil_chk(replyHandlers_)) set:replyAddress value:replyHandler];
  }
  [self sendWithNSString:[envelope toJsonString]];
}

- (BOOL)doUnregisterHandlerWithNSString:(NSString *)address
       withComGoodowRealtimeCoreHandler:(id<ComGoodowRealtimeCoreHandler>)handler {
  BOOL last = [super doUnregisterHandlerWithNSString:address withComGoodowRealtimeCoreHandler:handler];
  if (last && ![self isLocalForkWithNSString:address]) {
    [self sendUnregisterWithNSString:address];
  }
  return last;
}

- (void)onMessageWithGDJsonObject:(id<GDJsonObject>)msg {
  GDCDefaultMessage *message = [[GDCDefaultMessage alloc] initWithBoolean:NO withGDCBus:self withNSString:[((id<GDJsonObject>) nil_chk(msg)) getString:GDCWebSocketBusClient_ADDRESS_] withNSString:[msg getString:GDCWebSocketBusClient_REPLY_ADDRESS_] withId:[msg getWithNSString:GDCWebSocketBusClient_BODY_]];
  [self internalHandleDeliverMessageWithGDCMessage:message];
}

- (void)sendWithNSString:(NSString *)msg {
  if (state_ == [GDCStateEnum OPEN]) {
    [((id<ComGoodowRealtimeCoreWebSocket>) nil_chk(webSocket_)) sendWithNSString:msg];
  }
  else {
    [((JavaUtilLoggingLogger *) nil_chk(GDCWebSocketBusClient_log_)) warningWithNSString:[NSString stringWithFormat:@"WebSocket is in %@ state. Cannot send: %@", state_, msg]];
  }
}

- (void)sendPing {
  [self sendWithNSString:[((id<GDJsonObject>) nil_chk([((id<GDJsonObject>) nil_chk([GDJson createObject])) set:GDCWebSocketBusClient_TYPE_ value:@"ping"])) toJsonString]];
}

- (void)sendRegisterWithNSString:(NSString *)address {
  NSAssert(address != nil, @"address shouldn't be null");
  id<GDJsonObject> msg = [((id<GDJsonObject>) nil_chk([((id<GDJsonObject>) nil_chk([GDJson createObject])) set:GDCWebSocketBusClient_TYPE_ value:@"register"])) set:GDCWebSocketBusClient_ADDRESS_ value:address];
  [self sendWithNSString:[((id<GDJsonObject>) nil_chk(msg)) toJsonString]];
}

- (void)sendUnregisterWithNSString:(NSString *)address {
  id<GDJsonObject> msg = [((id<GDJsonObject>) nil_chk([((id<GDJsonObject>) nil_chk([GDJson createObject])) set:GDCWebSocketBusClient_TYPE_ value:@"unregister"])) set:GDCWebSocketBusClient_ADDRESS_ value:address];
  [self sendWithNSString:[((id<GDJsonObject>) nil_chk(msg)) toJsonString]];
}

+ (void)initialize {
  if (self == [GDCWebSocketBusClient class]) {
    GDCWebSocketBusClient_log_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[GDCWebSocketBusClient class]] getName]];
  }
}

- (void)copyAllFieldsTo:(GDCWebSocketBusClient *)other {
  [super copyAllFieldsTo:other];
  other->options_ = options_;
  other->pingInterval_ = pingInterval_;
  other->pingTimerID_ = pingTimerID_;
  other->reconnect__ = reconnect__;
  other->sessionID_ = sessionID_;
  other->url_ = url_;
  other->webSocket_ = webSocket_;
  other->webSocketHandler_ = webSocketHandler_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withGDJsonObject:", "WebSocketBusClient", NULL, 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "login:password:replyHandler:", "login", "V", 0x1, NULL },
    { "reconnect", NULL, "V", 0x1, NULL },
    { "registerHandlerWithNSString:withComGoodowRealtimeCoreHandler:", "registerHandler", "Lcom.goodow.realtime.core.HandlerRegistration;", 0x1, NULL },
    { "doRegisterHandlerWithNSString:withComGoodowRealtimeCoreHandler:", "doRegisterHandler", "Z", 0x4, NULL },
    { "doSendOrPubWithBoolean:withNSString:withId:withComGoodowRealtimeCoreHandler:", "doSendOrPub", "V", 0x4, NULL },
    { "doUnregisterHandlerWithNSString:withComGoodowRealtimeCoreHandler:", "doUnregisterHandler", "Z", 0x4, NULL },
    { "onMessageWithGDJsonObject:", "onMessage", "V", 0x4, NULL },
    { "sendWithNSString:", "send", "V", 0x4, NULL },
    { "sendPing", NULL, "V", 0x4, NULL },
    { "sendRegisterWithNSString:", "sendRegister", "V", 0x4, NULL },
    { "sendUnregisterWithNSString:", "sendUnregister", "V", 0x4, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "PING_INTERVAL_", NULL, 0x1c, "Ljava.lang.String;" },
    { "BODY_", NULL, 0x1c, "Ljava.lang.String;" },
    { "ADDRESS_", NULL, 0x1c, "Ljava.lang.String;" },
    { "REPLY_ADDRESS_", NULL, 0x1c, "Ljava.lang.String;" },
    { "TYPE_", NULL, 0x1c, "Ljava.lang.String;" },
    { "log_", NULL, 0x1a, "Ljava.util.logging.Logger;" },
    { "url_", NULL, 0x12, "Ljava.lang.String;" },
    { "options_", NULL, 0x12, "Lcom.goodow.realtime.json.JsonObject;" },
    { "pingInterval_", NULL, 0x12, "I" },
    { "webSocketHandler_", NULL, 0x12, "Lcom.goodow.realtime.core.WebSocket$WebSocketHandler;" },
    { "webSocket_", NULL, 0x2, "Lcom.goodow.realtime.core.WebSocket;" },
    { "sessionID_", NULL, 0x2, "Ljava.lang.String;" },
    { "pingTimerID_", NULL, 0x2, "I" },
    { "reconnect__", "reconnect", 0x2, "Z" },
  };
  static J2ObjcClassInfo _GDCWebSocketBusClient = { "WebSocketBusClient", "com.goodow.realtime.channel.impl", NULL, 0x1, 13, methods, 14, fields, 0, NULL};
  return &_GDCWebSocketBusClient;
}

@end
@implementation GDCWebSocketBusClient_$1

- (void)onCloseWithGDJsonObject:(id<GDJsonObject>)reason {
  this$0_->state_ = [GDCStateEnum CLOSED];
  NSAssert(this$0_->pingTimerID_ > 0, @"pingTimerID should > 0");
  [ComGoodowRealtimeCorePlatform cancelTimerWithInt:this$0_->pingTimerID_];
  [this$0_ doDeliverMessageWithGDCMessage:[[GDCDefaultMessage alloc] initWithBoolean:NO withGDCBus:nil withNSString:[GDCBus LOCAL_ON_CLOSE] withNSString:nil withId:reason]];
  if (this$0_->reconnect__) {
    [this$0_ reconnect];
  }
}

- (void)onErrorWithNSString:(NSString *)error {
  this$0_->reconnect__ = NO;
  [this$0_ doDeliverMessageWithGDCMessage:[[GDCDefaultMessage alloc] initWithBoolean:NO withGDCBus:nil withNSString:[GDCBus LOCAL_ON_ERROR] withNSString:nil withId:[((id<GDJsonObject>) nil_chk([GDJson createObject])) set:@"message" value:error]]];
}

- (void)onMessageWithNSString:(NSString *)msg {
  [this$0_ onMessageWithGDJsonObject:[GDJson parseWithNSString:msg]];
}

- (void)onOpen {
  this$0_->state_ = [GDCStateEnum OPEN];
  this$0_->reconnect__ = YES;
  [this$0_ sendPing];
  this$0_->pingTimerID_ = [ComGoodowRealtimeCorePlatform setPeriodicWithInt:this$0_->pingInterval_ withComGoodowRealtimeCoreHandler:[[GDCWebSocketBusClient_$1_$1 alloc] initWithGDCWebSocketBusClient_$1:self]];
  IOSObjectArray *addresses = [((id<GDJsonObject>) nil_chk(this$0_->handlerMap_)) keys];
  {
    IOSObjectArray *a__ = addresses;
    id const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *address = (*b__++);
      NSAssert([((id<GDJsonArray>) nil_chk([this$0_->handlerMap_ getArray:address])) count] > 0, [[NSString stringWithFormat:@"Handlers registried on %@ shouldn't be empty" J2OBJC_COMMA() address] description]);
      if (![this$0_ isLocalForkWithNSString:address]) {
        [this$0_ sendRegisterWithNSString:address];
      }
    }
  }
  [this$0_ doDeliverMessageWithGDCMessage:[[GDCDefaultMessage alloc] initWithBoolean:NO withGDCBus:nil withNSString:[GDCBus LOCAL_ON_OPEN] withNSString:nil withId:nil]];
}

- (id)initWithGDCWebSocketBusClient:(GDCWebSocketBusClient *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "onCloseWithGDJsonObject:", "onClose", "V", 0x1, NULL },
    { "onErrorWithNSString:", "onError", "V", 0x1, NULL },
    { "onMessageWithNSString:", "onMessage", "V", 0x1, NULL },
    { "onOpen", NULL, "V", 0x1, NULL },
    { "initWithGDCWebSocketBusClient:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.goodow.realtime.channel.impl.WebSocketBusClient;" },
  };
  static J2ObjcClassInfo _GDCWebSocketBusClient_$1 = { "$1", "com.goodow.realtime.channel.impl", "WebSocketBusClient", 0x8000, 5, methods, 1, fields, 0, NULL};
  return &_GDCWebSocketBusClient_$1;
}

@end
@implementation GDCWebSocketBusClient_$1_$1

- (void)handleWithId:(id)ignore {
  [this$0_->this$0_ sendPing];
}

- (id)initWithGDCWebSocketBusClient_$1:(GDCWebSocketBusClient_$1 *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handleWithJavaLangVoid:", "handle", "V", 0x1, NULL },
    { "initWithGDCWebSocketBusClient_$1:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.goodow.realtime.channel.impl.WebSocketBusClient$1;" },
  };
  static J2ObjcClassInfo _GDCWebSocketBusClient_$1_$1 = { "$1", "com.goodow.realtime.channel.impl", "WebSocketBusClient$$1", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_GDCWebSocketBusClient_$1_$1;
}

@end
@implementation GDCWebSocketBusClient_$2

- (void)handleWithId:(id<GDCMessage>)event {
  [this$0_ clearHandlers];
}

- (id)initWithGDCWebSocketBusClient:(GDCWebSocketBusClient *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handleWithGDCMessage:", "handle", "V", 0x1, NULL },
    { "initWithGDCWebSocketBusClient:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.goodow.realtime.channel.impl.WebSocketBusClient;" },
  };
  static J2ObjcClassInfo _GDCWebSocketBusClient_$2 = { "$2", "com.goodow.realtime.channel.impl", "WebSocketBusClient", 0x8000, 2, methods, 1, fields, 0, NULL};
  return &_GDCWebSocketBusClient_$2;
}

@end
@implementation GDCWebSocketBusClient_$3

- (void)handleWithId:(id<GDCMessage>)msg {
  id<GDJsonObject> body = [((id<GDCMessage>) nil_chk(msg)) body];
  if ([@"ok" isEqual:[((id<GDJsonObject>) nil_chk(body)) getString:@"status"]]) {
    this$0_->sessionID_ = [body getString:@"sessionID"];
  }
  if (val$replyHandler_ != nil) {
    [this$0_ scheduleHandleWithNSString:@"vertx.basicauthmanager.login" withId:val$replyHandler_ withId:[body remove:@"sessionID"]];
  }
}

- (id)initWithGDCWebSocketBusClient:(GDCWebSocketBusClient *)outer$
   withComGoodowRealtimeCoreHandler:(id<ComGoodowRealtimeCoreHandler>)capture$0 {
  this$0_ = outer$;
  val$replyHandler_ = capture$0;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handleWithGDCMessage:", "handle", "V", 0x1, NULL },
    { "initWithGDCWebSocketBusClient:withComGoodowRealtimeCoreHandler:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.goodow.realtime.channel.impl.WebSocketBusClient;" },
    { "val$replyHandler_", NULL, 0x1012, "Lcom.goodow.realtime.core.Handler;" },
  };
  static J2ObjcClassInfo _GDCWebSocketBusClient_$3 = { "$3", "com.goodow.realtime.channel.impl", "WebSocketBusClient", 0x8000, 2, methods, 2, fields, 0, NULL};
  return &_GDCWebSocketBusClient_$3;
}

@end
