//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/retechretech/dev/workspace/realtime/realtime-channel/src/main/java/com/goodow/realtime/channel/impl/ReliabeBusClient.java
//
//  Created by retechretech.
//

#include "IOSClass.h"
#include "com/goodow/realtime/channel/Bus.h"
#include "com/goodow/realtime/channel/BusHook.h"
#include "com/goodow/realtime/channel/Message.h"
#include "com/goodow/realtime/channel/State.h"
#include "com/goodow/realtime/channel/impl/ReliabeBusClient.h"
#include "com/goodow/realtime/channel/impl/SimpleBus.h"
#include "com/goodow/realtime/core/Handler.h"
#include "com/goodow/realtime/core/HandlerRegistration.h"
#include "com/goodow/realtime/json/Json.h"
#include "com/goodow/realtime/json/JsonObject.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"

@implementation GDCReliabeBusClient

static JavaUtilLoggingLogger * GDCReliabeBusClient_log_;

+ (JavaUtilLoggingLogger *)log {
  return GDCReliabeBusClient_log_;
}

- (id)initWithGDCSimpleBus:(GDCSimpleBus *)wrapped {
  if (self = [super init]) {
    self->wrapped_ = wrapped;
    pendings_ = [GDJson createObject];
    currentRevisions_ = [GDJson createObject];
    knownHeadRevisions_ = [GDJson createObject];
    (void) [((GDCSimpleBus *) nil_chk(wrapped)) setHookWithGDCBusHook:[[GDCReliabeBusClient_$1 alloc] initWithGDCReliabeBusClient:self]];
  }
  return self;
}

- (void)close {
  [((GDCSimpleBus *) nil_chk(wrapped_)) close];
}

- (GDCStateEnum *)getReadyState {
  return [((GDCSimpleBus *) nil_chk(wrapped_)) getReadyState];
}

- (id<GDCBus>)publishWithNSString:(NSString *)address
                           withId:(id)msg {
  return [((GDCSimpleBus *) nil_chk(wrapped_)) publish:address message:msg];
}

- (id<ComGoodowRealtimeCoreHandlerRegistration>)registerHandlerWithNSString:(NSString *)address
                                           withComGoodowRealtimeCoreHandler:(id<ComGoodowRealtimeCoreHandler>)handler {
  return [((GDCSimpleBus *) nil_chk(wrapped_)) registerHandler:address handler:handler];
}

- (id<GDCBus>)sendWithNSString:(NSString *)address
                        withId:(id)msg
withComGoodowRealtimeCoreHandler:(id<ComGoodowRealtimeCoreHandler>)replyHandler {
  return [((GDCSimpleBus *) nil_chk(wrapped_)) send:address message:msg replyHandler:replyHandler];
}

- (GDCReliabeBusClient *)setHookWithGDCBusHook:(id<GDCBusHook>)hook {
  self->hook_ = hook;
  return self;
}

- (BOOL)onMessageWithGDCMessage:(id<GDCMessage>)message {
  NSString *address = [((id<GDCMessage>) nil_chk(message)) address];
  id body = [message body];
  if (!([body conformsToProtocol: @protocol(GDJsonObject)]) || ![((id<GDJsonObject>) check_protocol_cast(body, @protocol(GDJsonObject))) has:@"_id"]) {
    return YES;
  }
  double number = [((id<GDJsonObject>) check_protocol_cast(body, @protocol(GDJsonObject))) getNumber:@"_id"];
  BOOL isExist = [((id<GDJsonObject>) nil_chk(pendings_)) has:address];
  if (!isExist) {
    (void) [((id<GDJsonObject>) nil_chk(currentRevisions_)) set:address number:number];
    (void) [((id<GDJsonObject>) nil_chk(knownHeadRevisions_)) set:address number:number];
    return YES;
  }
  double currentRevision = [((id<GDJsonObject>) nil_chk(currentRevisions_)) getNumber:address];
  if (number <= currentRevision) {
    [((JavaUtilLoggingLogger *) nil_chk(GDCReliabeBusClient_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel CONFIG] withNSString:[NSString stringWithFormat:@"Old dup at revision %f, current is now ", number] withId:[JavaLangDouble valueOfWithDouble:currentRevision]];
    return NO;
  }
  id<GDJsonObject> pending = [pendings_ getObject:address];
  id<GDJsonObject> existing = [((id<GDJsonObject>) nil_chk(pending)) getObject:[NSString stringWithFormat:@"%f", number]];
  if (existing != nil) {
    NSAssert(number > currentRevision + 1, @"should not have pending data");
    [((JavaUtilLoggingLogger *) nil_chk(GDCReliabeBusClient_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel CONFIG] withNSString:[NSString stringWithFormat:@"Dup message: %@", message]];
    return NO;
  }
  double knownHeadRevision = [JavaLangMath maxWithDouble:[((id<GDJsonObject>) nil_chk(knownHeadRevisions_)) getNumber:address] withDouble:number];
  (void) [knownHeadRevisions_ set:address number:knownHeadRevision];
  if (number > currentRevision + 1) {
    (void) [pending set:[NSString stringWithFormat:@"%f", number] value:message];
    [((JavaUtilLoggingLogger *) nil_chk(GDCReliabeBusClient_log_)) logWithJavaUtilLoggingLevel:[JavaUtilLoggingLevel CONFIG] withNSString:[NSString stringWithFormat:@"Missed message, currentRevision=%f message revision=%f", currentRevision, number]];
    [self scheduleCatchupWithNSString:address withDouble:currentRevision + 1];
    return NO;
  }
  NSAssert(number == currentRevision + 1, @"other cases should have been caught");
  NSString *next;
  while (YES) {
    [((GDCSimpleBus *) nil_chk(wrapped_)) doDeliverMessageWithGDCMessage:message];
    (void) [currentRevisions_ set:address number:++currentRevision];
    next = [NSString stringWithFormat:@"%f", currentRevision + 1];
    message = [pending getWithNSString:next];
    if (message != nil) {
      (void) [pending remove:next];
    }
    else {
      break;
    }
  }
  NSAssert(![pending has:next], @"/Users/retechretech/dev/workspace/realtime/realtime-channel/src/main/java/com/goodow/realtime/channel/impl/ReliabeBusClient.java:162 condition failed: assert !pending.has(next);");
  return NO;
}

- (void)scheduleCatchupWithNSString:(NSString *)address
                         withDouble:(double)d {
}

+ (void)initialize {
  if (self == [GDCReliabeBusClient class]) {
    GDCReliabeBusClient_log_ = [JavaUtilLoggingLogger getLoggerWithNSString:[[IOSClass classWithClass:[GDCReliabeBusClient class]] getName]];
  }
}

- (void)copyAllFieldsTo:(GDCReliabeBusClient *)other {
  [super copyAllFieldsTo:other];
  other->currentRevisions_ = currentRevisions_;
  other->hook_ = hook_;
  other->knownHeadRevisions_ = knownHeadRevisions_;
  other->pendings_ = pendings_;
  other->wrapped_ = wrapped_;
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "initWithGDCSimpleBus:", "ReliabeBusClient", NULL, 0x1, NULL },
    { "close", NULL, "V", 0x1, NULL },
    { "getReadyState", NULL, "Lcom.goodow.realtime.channel.State;", 0x1, NULL },
    { "publishWithNSString:withId:", "publish", "Lcom.goodow.realtime.channel.Bus;", 0x1, NULL },
    { "registerHandlerWithNSString:withComGoodowRealtimeCoreHandler:", "registerHandler", "Lcom.goodow.realtime.core.HandlerRegistration;", 0x1, NULL },
    { "sendWithNSString:withId:withComGoodowRealtimeCoreHandler:", "send", "Lcom.goodow.realtime.channel.Bus;", 0x1, NULL },
    { "setHookWithGDCBusHook:", "setHook", "Lcom.goodow.realtime.channel.impl.ReliabeBusClient;", 0x1, NULL },
    { "onMessageWithGDCMessage:", "onMessage", "Z", 0x4, NULL },
    { "scheduleCatchupWithNSString:withDouble:", "scheduleCatchup", "V", 0x2, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "log_", NULL, 0x1a, "Ljava.util.logging.Logger;" },
    { "pendings_", NULL, 0x12, "Lcom.goodow.realtime.json.JsonObject;" },
    { "currentRevisions_", NULL, 0x12, "Lcom.goodow.realtime.json.JsonObject;" },
    { "knownHeadRevisions_", NULL, 0x12, "Lcom.goodow.realtime.json.JsonObject;" },
    { "wrapped_", NULL, 0x12, "Lcom.goodow.realtime.channel.impl.SimpleBus;" },
    { "hook_", NULL, 0x2, "Lcom.goodow.realtime.channel.BusHook;" },
  };
  static J2ObjcClassInfo _GDCReliabeBusClient = { "ReliabeBusClient", "com.goodow.realtime.channel.impl", NULL, 0x1, 9, methods, 6, fields, 0, NULL};
  return &_GDCReliabeBusClient;
}

@end
@implementation GDCReliabeBusClient_$1

- (BOOL)handlePreRegisterWithNSString:(NSString *)address
     withComGoodowRealtimeCoreHandler:(id<ComGoodowRealtimeCoreHandler>)handler {
  (void) [((id<GDJsonObject>) nil_chk(this$0_->pendings_)) set:address value:[GDJson createObject]];
  return this$0_->hook_ == nil ? YES : [this$0_->hook_ handlePreRegisterWithNSString:address withComGoodowRealtimeCoreHandler:handler];
}

- (BOOL)handleReceiveMessageWithGDCMessage:(id<GDCMessage>)message {
  if (this$0_->hook_ != nil && ![this$0_->hook_ handleReceiveMessageWithGDCMessage:message]) {
    return NO;
  }
  return [this$0_ onMessageWithGDCMessage:message];
}

- (BOOL)handleSendOrPubWithBoolean:(BOOL)send
                      withNSString:(NSString *)address
                            withId:(id)msg
  withComGoodowRealtimeCoreHandler:(id<ComGoodowRealtimeCoreHandler>)replyHandler {
  return this$0_->hook_ == nil ? YES : [this$0_->hook_ handleSendOrPubWithBoolean:send withNSString:address withId:msg withComGoodowRealtimeCoreHandler:replyHandler];
}

- (BOOL)handleUnregisterWithNSString:(NSString *)address {
  (void) [((id<GDJsonObject>) nil_chk(this$0_->pendings_)) remove:address];
  (void) [((id<GDJsonObject>) nil_chk(this$0_->currentRevisions_)) remove:address];
  (void) [((id<GDJsonObject>) nil_chk(this$0_->knownHeadRevisions_)) remove:address];
  return this$0_->hook_ == nil ? YES : [this$0_->hook_ handleUnregisterWithNSString:address];
}

- (id)initWithGDCReliabeBusClient:(GDCReliabeBusClient *)outer$ {
  this$0_ = outer$;
  return [super init];
}

+ (J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { "handlePreRegisterWithNSString:withComGoodowRealtimeCoreHandler:", "handlePreRegister", "Z", 0x1, NULL },
    { "handleReceiveMessageWithGDCMessage:", "handleReceiveMessage", "Z", 0x1, NULL },
    { "handleSendOrPubWithBoolean:withNSString:withId:withComGoodowRealtimeCoreHandler:", "handleSendOrPub", "Z", 0x1, NULL },
    { "handleUnregisterWithNSString:", "handleUnregister", "Z", 0x1, NULL },
    { "initWithGDCReliabeBusClient:", "init", NULL, 0x0, NULL },
  };
  static J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lcom.goodow.realtime.channel.impl.ReliabeBusClient;" },
  };
  static J2ObjcClassInfo _GDCReliabeBusClient_$1 = { "$1", "com.goodow.realtime.channel.impl", "ReliabeBusClient", 0x8000, 5, methods, 1, fields, 0, NULL};
  return &_GDCReliabeBusClient_$1;
}

@end
